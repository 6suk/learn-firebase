{"version":3,"file":"static/js/14.436f3c65.chunk.js","mappings":"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","sources":["components/Post/PostPhotoForm.jsx","components/Post/PostForm.jsx","components/Post/PostEditForm.jsx","components/Post/PostItem.jsx","components/Post/Post.jsx","hooks/useDataBase.jsx","hooks/useStorage.jsx"],"sourcesContent":["import { faPlus, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { isEmpty } from 'utils/util';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst PostPhotoForm = ({ image, setImage }) => {\r\n  const { isLogin } = useSelector((state) => state.user);\r\n\r\n  const onFileChange = (e) => {\r\n    const { files } = e.target;\r\n    const file = files[0];\r\n\r\n    if (!isEmpty(file)) {\r\n      const reader = new FileReader();\r\n\r\n      reader.addEventListener('loadend', (e) => {\r\n        // FileReader.result로도 받을 수 있음\r\n        setImage(reader.result);\r\n      });\r\n\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  const onClearImgClick = () => setImage('');\r\n  return (\r\n    <>\r\n      <input\r\n        id=\"attach-file\"\r\n        type=\"file\"\r\n        accept=\"image/*\"\r\n        onChange={onFileChange}\r\n        className=\"factoryInput__file\"\r\n        disabled={isLogin ? false : true}\r\n      />\r\n      {image ? (\r\n        <div className=\"factoryForm__clear\" onClick={onClearImgClick}>\r\n          <span>Remove</span>\r\n          <FontAwesomeIcon icon={faTimes} />\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <label htmlFor=\"attach-file\" className=\"factoryInput__label\">\r\n            <span>Add photos</span>\r\n            <FontAwesomeIcon icon={faPlus} />\r\n          </label>\r\n        </>\r\n      )}\r\n      {image && (\r\n        <div className=\"factoryForm__attachment\">\r\n          <img\r\n            src={image}\r\n            style={{\r\n              backgroundImage: image,\r\n            }}\r\n            alt=\"미리보기\"\r\n          />\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostPhotoForm;\r\n","import useInput from 'hooks/useInput';\r\nimport { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport PostPhotoForm from './PostPhotoForm';\r\n\r\nconst PostForm = ({ setAction: { setDataBase, setStorage } }) => {\r\n  const [image, setImage] = useState('');\r\n  const { user } = useSelector((state) => state.user);\r\n\r\n  const submitAction = async (inputValue) => {\r\n    const imageUrl = await setStorage(user.uid, image);\r\n    await setDataBase(user.uid, inputValue, imageUrl);\r\n    setImage('');\r\n  };\r\n  const [inputValue, onChange, onSubmit] = useInput('', submitAction, true);\r\n\r\n  return (\r\n    <form action=\"\" onSubmit={onSubmit} className=\"factoryForm\">\r\n      <div className=\"factoryInput__container\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder={user ? '내용 작성' : '로그인 후 이용 가능 합니다!'}\r\n          maxLength={120}\r\n          value={inputValue}\r\n          onChange={onChange}\r\n          className=\"factoryInput__input\"\r\n          disabled={user ? false : true}\r\n        />\r\n        <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" disabled={user ? false : true} />\r\n      </div>\r\n      <PostPhotoForm image={image} setImage={setImage} />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default PostForm;\r\n","import useInput from 'hooks/useInput';\r\nimport { useState } from 'react';\r\nimport { dateUtil } from 'utils/util';\r\nimport PostPhotoForm from './PostPhotoForm';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst PostEdit = ({\r\n  post: { imageUrl, id, post, date },\r\n  toggleEdit,\r\n  updateAction: { updateStorage, updateDataBase },\r\n}) => {\r\n  const { uid } = useSelector((state) => state.user.user);\r\n  const [image, setImage] = useState(imageUrl || '');\r\n\r\n  const submitAction = async (inputValue) => {\r\n    const newImageUrl = await updateStorage(uid, image, imageUrl);\r\n    await updateDataBase(id, inputValue, newImageUrl);\r\n    toggleEdit();\r\n  };\r\n\r\n  const [inputValue, onChange, onSubmit] = useInput(post, submitAction);\r\n\r\n  return (\r\n    <form onSubmit={onSubmit} className=\"container nweetEdit\">\r\n      <input type=\"text\" onChange={onChange} value={inputValue} required autoFocus maxLength={120} />\r\n      <p>{dateUtil(date)}</p>\r\n      <PostPhotoForm image={image} setImage={setImage} />\r\n      <div className=\"editBtns\">\r\n        <button onClick={toggleEdit} className=\"formBtn cancelBtn\">\r\n          취소\r\n        </button>\r\n        <input type=\"submit\" value=\"수정 완료\" className=\"formBtn\" />\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default PostEdit;\r\n","import { faPencilAlt, faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setPostFormToggle } from 'slice/postToggle';\r\nimport { dateUtil } from 'utils/util';\r\nimport PostEdit from './PostEditForm';\r\n\r\nconst PostItem = ({ post, isOwner, deleteAction: { deleteDataBase, deleteStroage }, updateAction }) => {\r\n  const dispatch = useDispatch();\r\n  const [isEdit, setIsEdit] = useState(false);\r\n\r\n  const toggleEdit = () => {\r\n    setIsEdit(!isEdit);\r\n    dispatch(setPostFormToggle());\r\n  };\r\n\r\n  const onDelSubmit = async () => {\r\n    const check = window.confirm('정말 삭제하실건가요?');\r\n    if (check) {\r\n      await deleteStroage(post.imageUrl);\r\n      await deleteDataBase(post.id);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <li className={'nweet'}>\r\n      {isEdit ? (\r\n        <PostEdit post={post} toggleEdit={toggleEdit} updateAction={updateAction} />\r\n      ) : (\r\n        <>\r\n          {post.imageUrl && <img src={post.imageUrl} alt={post.id} style={{ maxWidth: '100px' }} />}\r\n          <h4>{post.post}</h4>\r\n          <p>\r\n            {post.displayName} <span>{dateUtil(post.date)}</span>\r\n          </p>\r\n          {isOwner && (\r\n            <>\r\n              <div className=\"nweet__actions\">\r\n                <span onClick={onDelSubmit}>\r\n                  <FontAwesomeIcon icon={faTrash} />\r\n                </span>\r\n                <span onClick={toggleEdit}>\r\n                  <FontAwesomeIcon icon={faPencilAlt} />\r\n                </span>\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default PostItem;\r\n","import { useDataBase } from 'hooks/useDataBase';\r\nimport { useStorage } from 'hooks/useStorage';\r\nimport { useMemo } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\nimport { keyframes, styled } from 'styled-components';\r\nimport { isEmpty } from 'utils/util';\r\nimport PostForm from './PostForm';\r\nimport PostItem from './PostItem';\r\n\r\n/**\r\n * 전체 포스트 리스트\r\n */\r\nconst Post = () => {\r\n  const { type } = useParams();\r\n  const { postFormToggle } = useSelector((state) => state.postToggle);\r\n  const { myPostList, user, isLogin } = useSelector((state) => state.user);\r\n  const postList = useSelector((state) => state.postList.data);\r\n  const { setDataBase, updateDataBase, deleteDataBase } = useDataBase();\r\n  const { setStorage, updateStorage, deleteStroage } = useStorage();\r\n  const setAction = { setDataBase, setStorage };\r\n  const updateAction = { updateDataBase, updateStorage };\r\n  const deleteAction = { deleteDataBase, deleteStroage };\r\n\r\n  const data = useMemo(() => {\r\n    switch (type) {\r\n      case 'user':\r\n        return myPostList;\r\n      default:\r\n        return postList;\r\n    }\r\n  }, [type, myPostList, postList]);\r\n\r\n  return (\r\n    <>\r\n      {postFormToggle && <PostForm setAction={setAction} />}\r\n      <PostAnimation>\r\n        <>\r\n          {isEmpty(data) ? (\r\n            <div className=\"nweet__nopost\">등록된 게시물이 없어요!</div>\r\n          ) : (\r\n            <PostWrap>\r\n              {data.map((post) => {\r\n                const isOwner = isLogin && user.uid === post.uid;\r\n                return (\r\n                  <PostItem\r\n                    post={post}\r\n                    isOwner={isOwner}\r\n                    updateAction={updateAction}\r\n                    deleteAction={deleteAction}\r\n                    key={post.id}\r\n                  />\r\n                );\r\n              })}\r\n            </PostWrap>\r\n          )}\r\n        </>\r\n      </PostAnimation>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Animation = keyframes`\r\n  0% {\r\n    opacity: 0;\r\n  }\r\n  50% {\r\n    opacity: 0.5;\r\n  }\r\n  100% {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst PostAnimation = styled.div`\r\n  animation: ${Animation} 0.5s ease-in-out forwards;\r\n`;\r\n\r\nconst PostWrap = styled.ul`\r\n  margin-top: 30px;\r\n`;\r\n\r\nexport default Post;\r\n","import { POST_COLLECTION, POST_DOC } from 'fbase';\r\nimport { addDoc, deleteDoc, updateDoc } from 'firebase/firestore';\r\nimport { useState } from 'react';\r\n\r\nexport const useDataBase = () => {\r\n  const [isDone, setIsDone] = useState(false);\r\n\r\n  const setDataBase = async (uid, inputValue, imageUrl) => {\r\n    await addDoc(POST_COLLECTION, {\r\n      date: Date.now(),\r\n      post: inputValue,\r\n      uid,\r\n      imageUrl,\r\n    });\r\n    setIsDone(true);\r\n  };\r\n\r\n  const updateDataBase = async (pid, inputValue, imageUrl) => {\r\n    await updateDoc(POST_DOC(pid), {\r\n      post: inputValue,\r\n      imageUrl,\r\n    });\r\n    setIsDone(true);\r\n  };\r\n\r\n  const deleteDataBase = async (pid) => {\r\n    await deleteDoc(POST_DOC(pid));\r\n    setIsDone(true);\r\n  };\r\n\r\n  return { isDone, setDataBase, updateDataBase, deleteDataBase };\r\n};\r\n","import { storage } from 'fbase';\r\nimport { deleteObject, getDownloadURL, ref, uploadString } from 'firebase/storage';\r\nimport { isEmpty } from 'utils/util';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\n/**\r\n *\r\n * @returns\r\n */\r\nexport const useStorage = () => {\r\n  const setStorage = async (uid, image) => {\r\n    let imageUrl = '';\r\n    if (image !== '') {\r\n      const fileRef = ref(storage, `${uid}/${uuid()}`);\r\n      const uploadResult = await uploadString(fileRef, image, 'data_url');\r\n      imageUrl = await getDownloadURL(uploadResult.ref);\r\n    }\r\n    return imageUrl;\r\n  };\r\n\r\n  const deleteStroage = async (imageUrl) => {\r\n    if (!isEmpty(imageUrl)) {\r\n      try {\r\n        const curImgRef = ref(storage, imageUrl);\r\n        await deleteObject(curImgRef);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const updateStorage = async (uid, image, imageUrl) => {\r\n    if (image !== imageUrl) {\r\n      await deleteStroage(imageUrl);\r\n      const newImageUrl = await setStorage(uid, image);\r\n      return newImageUrl;\r\n    } else {\r\n      return imageUrl;\r\n    }\r\n  };\r\n\r\n  return { setStorage, updateStorage, deleteStroage };\r\n};\r\n"],"names":["_ref","image","setImage","isLogin","useSelector","state","user","_jsxs","_Fragment","children","_jsx","id","type","accept","onChange","e","file","target","files","isEmpty","reader","FileReader","addEventListener","result","readAsDataURL","className","disabled","onClick","FontAwesomeIcon","icon","faTimes","htmlFor","faPlus","src","style","backgroundImage","alt","_ref$setAction","setAction","setDataBase","setStorage","_useState","useState","_useState2","_slicedToArray","submitAction","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","inputValue","imageUrl","wrap","_context","prev","next","uid","sent","stop","_x","apply","arguments","_useInput","useInput","_useInput2","onSubmit","action","placeholder","maxLength","value","PostPhotoForm","_ref$post","post","date","toggleEdit","_ref$updateAction","updateAction","updateStorage","updateDataBase","newImageUrl","required","autoFocus","dateUtil","isOwner","_ref$deleteAction","deleteAction","deleteDataBase","deleteStroage","dispatch","useDispatch","isEdit","setIsEdit","setPostFormToggle","onDelSubmit","window","confirm","PostEdit","maxWidth","displayName","faTrash","faPencilAlt","Animation","keyframes","_templateObject","_taggedTemplateLiteral","PostAnimation","styled","div","_templateObject2","PostWrap","ul","_templateObject3","useParams","postFormToggle","postToggle","_useSelector2","myPostList","postList","data","_useDataBase","isDone","setIsDone","addDoc","POST_COLLECTION","Date","now","_x2","_x3","_callee2","pid","_context2","updateDoc","POST_DOC","_x4","_x5","_x6","_ref3","_callee3","_context3","deleteDoc","_x7","useDataBase","_useStorage","fileRef","uploadResult","ref","storage","concat","uuid","uploadString","getDownloadURL","abrupt","curImgRef","deleteObject","t0","console","log","useStorage","useMemo","PostForm","map","PostItem"],"sourceRoot":""}