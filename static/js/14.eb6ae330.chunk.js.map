{"version":3,"file":"static/js/14.eb6ae330.chunk.js","mappings":"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","sources":["components/Post/PostPhotoForm.jsx","components/Post/PostForm.jsx","components/Post/PostEditForm.jsx","components/Post/PostItem.jsx","components/Post/Post.jsx","hooks/useDataBase.jsx","hooks/useStorage.jsx"],"sourcesContent":["import { faPlus, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { isEmpty } from 'utils/util';\r\nimport { useSelector } from 'react-redux';\r\nimport imageCompression from 'browser-image-compression';\r\n\r\nconst imageCompressedOption = {\r\n  maxSizeMB: 0.5,\r\n  maxWidthOrHeight: 150,\r\n  useWebWorker: true,\r\n};\r\n\r\nconst PostPhotoForm = ({ image, setImage }) => {\r\n  const { isLogin } = useSelector((state) => state.user);\r\n\r\n  // 이미지 최적화\r\n  const handleImageCompress = async (image) => {\r\n    const compressedBlob = await imageCompression(image, imageCompressedOption);\r\n    const compressedDataURL = await imageCompression.getDataUrlFromFile(compressedBlob);\r\n    return compressedDataURL;\r\n  };\r\n\r\n  const onFileChange = async (e) => {\r\n    const { files } = e.target;\r\n    const file = files[0];\r\n\r\n    if (!isEmpty(file)) {\r\n      setImage(await handleImageCompress(file));\r\n    }\r\n  };\r\n\r\n  const onClearImgClick = () => setImage('');\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        id=\"attach-file\"\r\n        type=\"file\"\r\n        accept=\"image/*\"\r\n        onChange={onFileChange}\r\n        className=\"factoryInput__file\"\r\n        disabled={!isLogin}\r\n      />\r\n      {image ? (\r\n        <div className=\"factoryForm__clear\" onClick={onClearImgClick}>\r\n          <span>Remove</span>\r\n          <FontAwesomeIcon icon={faTimes} />\r\n        </div>\r\n      ) : (\r\n        <label htmlFor=\"attach-file\" className=\"factoryInput__label\">\r\n          <span>Add photos</span>\r\n          <FontAwesomeIcon icon={faPlus} />\r\n        </label>\r\n      )}\r\n      {image && (\r\n        <div className=\"factoryForm__attachment\">\r\n          <img src={image} alt=\"미리보기\" />\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostPhotoForm;\r\n","import useInput from 'hooks/useInput';\r\nimport { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport PostPhotoForm from './PostPhotoForm';\r\n\r\nconst PostForm = ({ setAction: { addPost, setStorage } }) => {\r\n  const [image, setImage] = useState('');\r\n  const { user } = useSelector((state) => state.user);\r\n\r\n  const submitAction = async (inputValue) => {\r\n    const imageUrl = await setStorage(user.uid, image);\r\n    await addPost(user.uid, inputValue, imageUrl);\r\n    setImage('');\r\n  };\r\n  const [inputValue, onChange, onSubmit] = useInput('', submitAction, true);\r\n\r\n  return (\r\n    <form action=\"\" onSubmit={onSubmit} className=\"factoryForm\">\r\n      <div className=\"factoryInput__container\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder={user ? '내용 작성' : '로그인 후 이용 가능 합니다!'}\r\n          maxLength={120}\r\n          value={inputValue}\r\n          onChange={onChange}\r\n          className=\"factoryInput__input\"\r\n          disabled={user ? false : true}\r\n        />\r\n        <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" disabled={user ? false : true} />\r\n      </div>\r\n      <PostPhotoForm image={image} setImage={setImage} />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default PostForm;\r\n","import useInput from 'hooks/useInput';\r\nimport { useState } from 'react';\r\nimport { dateUtil } from 'utils/util';\r\nimport PostPhotoForm from './PostPhotoForm';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst PostEdit = ({ post: { imageUrl, id, post, date }, toggleEdit, updateAction: { updateStorage, updatePost } }) => {\r\n  const { uid } = useSelector((state) => state.user.user);\r\n  const [image, setImage] = useState(imageUrl || '');\r\n\r\n  const submitAction = async (inputValue) => {\r\n    const newImageUrl = await updateStorage(uid, image, imageUrl);\r\n    await updatePost(id, inputValue, newImageUrl);\r\n    toggleEdit();\r\n  };\r\n\r\n  const [inputValue, onChange, onSubmit] = useInput(post, submitAction);\r\n\r\n  return (\r\n    <form onSubmit={onSubmit} className=\"container nweetEdit\">\r\n      <input type=\"text\" onChange={onChange} value={inputValue} required autoFocus maxLength={120} />\r\n      <p>{dateUtil(date)}</p>\r\n      <PostPhotoForm image={image} setImage={setImage} />\r\n      <div className=\"editBtns\">\r\n        <button onClick={toggleEdit} className=\"formBtn cancelBtn\">\r\n          취소\r\n        </button>\r\n        <input type=\"submit\" value=\"수정 완료\" className=\"formBtn\" />\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default PostEdit;\r\n","import { faPencilAlt, faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setPostFormToggle } from 'slice/postToggle';\r\nimport { dateUtil } from 'utils/util';\r\nimport PostEdit from './PostEditForm';\r\n\r\nconst PostItem = ({ post, isOwner, deleteAction: { deletePost, deleteStorage }, updateAction }) => {\r\n  const dispatch = useDispatch();\r\n  const [isEdit, setIsEdit] = useState(false);\r\n\r\n  const toggleEdit = () => {\r\n    setIsEdit(!isEdit);\r\n    dispatch(setPostFormToggle());\r\n  };\r\n\r\n  const onDelSubmit = async () => {\r\n    const check = window.confirm('정말 삭제하실건가요?');\r\n    if (check) {\r\n      await deleteStorage(post.imageUrl);\r\n      await deletePost(post.id);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <li className={'nweet'}>\r\n      {isEdit ? (\r\n        <PostEdit post={post} toggleEdit={toggleEdit} updateAction={updateAction} />\r\n      ) : (\r\n        <>\r\n          {post.imageUrl && <img src={post.imageUrl} alt={post.id} style={{ maxWidth: '100px' }} />}\r\n          <h4>{post.post}</h4>\r\n          <p>\r\n            {post.displayName} <span>{dateUtil(post.date)}</span>\r\n          </p>\r\n          {isOwner && (\r\n            <>\r\n              <div className=\"nweet__actions\">\r\n                <span onClick={onDelSubmit}>\r\n                  <FontAwesomeIcon icon={faTrash} />\r\n                </span>\r\n                <span onClick={toggleEdit}>\r\n                  <FontAwesomeIcon icon={faPencilAlt} />\r\n                </span>\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default PostItem;\r\n","import { useDataBase } from 'hooks/useDataBase';\r\nimport { useStorage } from 'hooks/useStorage';\r\nimport { useMemo } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\nimport { keyframes, styled } from 'styled-components';\r\nimport { isEmpty } from 'utils/util';\r\nimport PostForm from './PostForm';\r\nimport PostItem from './PostItem';\r\n\r\n/**\r\n * 전체 포스트 리스트\r\n */\r\nconst Post = () => {\r\n  const { type } = useParams();\r\n  const { postFormToggle } = useSelector((state) => state.postToggle);\r\n  const { myPostList, user, isLogin } = useSelector((state) => state.user);\r\n  const postList = useSelector((state) => state.postList.data);\r\n  const { addPost, updatePost, deletePost } = useDataBase();\r\n  const { setStorage, updateStorage, deleteStorage } = useStorage();\r\n  const setAction = { addPost, setStorage };\r\n  const updateAction = { updatePost, updateStorage };\r\n  const deleteAction = { deletePost, deleteStorage };\r\n\r\n  const data = useMemo(() => {\r\n    switch (type) {\r\n      case 'user':\r\n        return myPostList;\r\n      default:\r\n        return postList;\r\n    }\r\n  }, [type, myPostList, postList]);\r\n\r\n  return (\r\n    <>\r\n      {postFormToggle && <PostForm setAction={setAction} />}\r\n      <PostAnimation>\r\n        <>\r\n          {isEmpty(data) ? (\r\n            <div className=\"nweet__nopost\">등록된 게시물이 없어요!</div>\r\n          ) : (\r\n            <PostWrap>\r\n              {data.map((post) => {\r\n                const isOwner = isLogin && user.uid === post.uid;\r\n                return (\r\n                  <PostItem\r\n                    post={post}\r\n                    isOwner={isOwner}\r\n                    updateAction={updateAction}\r\n                    deleteAction={deleteAction}\r\n                    key={post.id}\r\n                  />\r\n                );\r\n              })}\r\n            </PostWrap>\r\n          )}\r\n        </>\r\n      </PostAnimation>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Animation = keyframes`\r\n  0% {\r\n    opacity: 0;\r\n  }\r\n  50% {\r\n    opacity: 0.5;\r\n  }\r\n  100% {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst PostAnimation = styled.div`\r\n  animation: ${Animation} 0.5s ease-in-out forwards;\r\n`;\r\n\r\nconst PostWrap = styled.ul`\r\n  margin-top: 30px;\r\n`;\r\n\r\nexport default Post;\r\n","import { POST_COLLECTION, POST_DOC } from 'fbase';\r\nimport { addDoc, deleteDoc, updateDoc } from 'firebase/firestore';\r\n\r\nexport const useDataBase = () => {\r\n  const addPost = async (uid, inputValue, imageUrl) => {\r\n    await addDoc(POST_COLLECTION, {\r\n      date: Date.now(),\r\n      post: inputValue,\r\n      uid,\r\n      imageUrl,\r\n    });\r\n  };\r\n\r\n  const updatePost = async (pid, inputValue, imageUrl) => {\r\n    await updateDoc(POST_DOC(pid), {\r\n      post: inputValue,\r\n      imageUrl,\r\n    });\r\n  };\r\n\r\n  const deletePost = async (pid) => {\r\n    await deleteDoc(POST_DOC(pid));\r\n  };\r\n\r\n  return { addPost, updatePost, deletePost };\r\n};\r\n","import { storage } from 'fbase';\r\nimport { deleteObject, getDownloadURL, ref, uploadString } from 'firebase/storage';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nexport const useStorage = () => {\r\n  const setStorage = async (uid, image) => {\r\n    let imageUrl = '';\r\n    if (image !== '') {\r\n      const fileRef = ref(storage, `${uid}/${uuid()}`);\r\n      const uploadResult = await uploadString(fileRef, image, 'data_url');\r\n      imageUrl = await getDownloadURL(uploadResult.ref);\r\n    }\r\n    return imageUrl;\r\n  };\r\n\r\n  const deleteStorage = async (imageUrl) => {\r\n    if (imageUrl) {\r\n      try {\r\n        const curImgRef = ref(storage, imageUrl);\r\n        await deleteObject(curImgRef);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const updateStorage = async (uid, image, imageUrl) => {\r\n    if (image !== imageUrl) {\r\n      await deleteStorage(imageUrl);\r\n      const newImageUrl = await setStorage(uid, image);\r\n      return newImageUrl;\r\n    } else {\r\n      return imageUrl;\r\n    }\r\n  };\r\n  return { setStorage, updateStorage, deleteStorage };\r\n};\r\n"],"names":["imageCompressedOption","maxSizeMB","maxWidthOrHeight","useWebWorker","_ref","image","setImage","isLogin","useSelector","state","user","handleImageCompress","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","compressedBlob","compressedDataURL","wrap","_context","prev","next","imageCompression","sent","getDataUrlFromFile","abrupt","stop","_x","apply","arguments","onFileChange","_ref3","_callee2","e","files","file","_context2","target","isEmpty","t0","t1","_x2","_jsxs","_Fragment","children","_jsx","id","type","accept","onChange","className","disabled","onClick","FontAwesomeIcon","icon","faTimes","htmlFor","faPlus","src","alt","_ref$setAction","setAction","addPost","setStorage","_useState","useState","_useState2","_slicedToArray","submitAction","inputValue","imageUrl","uid","_useInput","useInput","_useInput2","onSubmit","action","placeholder","maxLength","value","PostPhotoForm","_ref$post","post","date","toggleEdit","_ref$updateAction","updateAction","updateStorage","updatePost","newImageUrl","required","autoFocus","dateUtil","isOwner","_ref$deleteAction","deleteAction","deletePost","deleteStorage","dispatch","useDispatch","isEdit","setIsEdit","setPostFormToggle","onDelSubmit","window","confirm","PostEdit","style","maxWidth","displayName","faTrash","faPencilAlt","Animation","keyframes","_templateObject","_taggedTemplateLiteral","PostAnimation","styled","div","_templateObject2","PostWrap","ul","_templateObject3","useParams","postFormToggle","postToggle","_useSelector2","myPostList","postList","data","_useDataBase","addDoc","POST_COLLECTION","Date","now","_x3","pid","updateDoc","POST_DOC","_x4","_x5","_x6","_callee3","_context3","deleteDoc","_x7","useDataBase","_useStorage","fileRef","uploadResult","ref","storage","concat","uuid","uploadString","getDownloadURL","curImgRef","deleteObject","console","log","useStorage","useMemo","PostForm","map","PostItem"],"sourceRoot":""}