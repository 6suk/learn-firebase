{"version":3,"file":"static/js/663.7121f171.chunk.js","mappings":"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","sources":["../node_modules/uuid/dist/esm-browser/rng.js","components/Post/PostForm.jsx","../node_modules/uuid/dist/esm-browser/native.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/v4.js","components/Post/Post.jsx","hooks/useDataBase.jsx","hooks/useStorage.jsx"],"sourcesContent":["// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import useInput from 'hooks/useInput';\r\nimport { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport PostPhotoForm from './PostPhotoForm';\r\n\r\nconst PostForm = ({ setAction: { addPost, setStorage } }) => {\r\n  const [image, setImage] = useState('');\r\n  const { user } = useSelector((state) => state.user);\r\n\r\n  const submitAction = async (inputValue) => {\r\n    const imageUrl = await setStorage(user.uid, image);\r\n    await addPost(user.uid, inputValue, imageUrl);\r\n    setImage('');\r\n  };\r\n  const [inputValue, onChange, onSubmit] = useInput('', submitAction, true);\r\n\r\n  return (\r\n    <form action=\"\" onSubmit={onSubmit} className=\"factoryForm\">\r\n      <div className=\"factoryInput__container\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder={user ? '내용 작성' : '로그인 후 이용 가능 합니다!'}\r\n          maxLength={120}\r\n          value={inputValue}\r\n          onChange={onChange}\r\n          className=\"factoryInput__input\"\r\n          disabled={user ? false : true}\r\n        />\r\n        <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" disabled={user ? false : true} />\r\n      </div>\r\n      <PostPhotoForm image={image} setImage={setImage} />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default PostForm;\r\n","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","import PostForm from 'components/Post/PostForm';\r\nimport PostList from 'components/Post/PostList';\r\nimport UserPostList from 'components/Post/UserPostList';\r\nimport { useDataBase } from 'hooks/useDataBase';\r\nimport { useStorage } from 'hooks/useStorage';\r\nimport { useEffect, useMemo, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\n\r\n/**\r\n * 전체 포스트 리스트\r\n */\r\nconst Post = () => {\r\n  const { type } = useParams();\r\n  const { postFormToggle } = useSelector((state) => state.postToggle);\r\n  const { addPost, updatePost, deletePost } = useDataBase();\r\n  const { setStorage, updateStorage, deleteStorage } = useStorage();\r\n  const [index, setIndex] = useState(null);\r\n\r\n  const action = useMemo(() => {\r\n    return [\r\n      { updatePost, updateStorage },\r\n      { deletePost, deleteStorage },\r\n    ];\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    switch (type) {\r\n      case 'user':\r\n        if (index !== 1) setIndex(1);\r\n        break;\r\n      default:\r\n        if (index !== 0) setIndex(0);\r\n        break;\r\n    }\r\n  }, [type]);\r\n\r\n  return (\r\n    <>\r\n      {postFormToggle && <PostForm setAction={{ addPost, setStorage }} />}\r\n      {index !== null && index === 0 && <PostList action={action} />}\r\n      {index !== null && index === 1 && <UserPostList action={action} />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import { POST_COLLECTION, POST_DOC } from 'fbase';\r\nimport { addDoc, deleteDoc, updateDoc } from 'firebase/firestore';\r\n\r\nexport const useDataBase = () => {\r\n  const addPost = async (uid, inputValue, imageUrl) => {\r\n    await addDoc(POST_COLLECTION, {\r\n      date: Date.now(),\r\n      post: inputValue,\r\n      uid,\r\n      imageUrl,\r\n    });\r\n  };\r\n\r\n  const updatePost = async (pid, inputValue, imageUrl) => {\r\n    await updateDoc(POST_DOC(pid), {\r\n      post: inputValue,\r\n      imageUrl,\r\n    });\r\n  };\r\n\r\n  const deletePost = async (pid) => {\r\n    await deleteDoc(POST_DOC(pid));\r\n  };\r\n\r\n  return { addPost, updatePost, deletePost };\r\n};\r\n","import { storage } from 'fbase';\r\nimport { deleteObject, getDownloadURL, ref, uploadString } from 'firebase/storage';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nexport const useStorage = () => {\r\n  const setStorage = async (uid, image) => {\r\n    let imageUrl = '';\r\n    if (image !== '') {\r\n      const fileRef = ref(storage, `${uid}/${uuid()}`);\r\n      const uploadResult = await uploadString(fileRef, image, 'data_url');\r\n      imageUrl = await getDownloadURL(uploadResult.ref);\r\n    }\r\n    return imageUrl;\r\n  };\r\n\r\n  const deleteStorage = async (imageUrl) => {\r\n    if (imageUrl) {\r\n      try {\r\n        const curImgRef = ref(storage, imageUrl);\r\n        await deleteObject(curImgRef);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const updateStorage = async (uid, image, imageUrl) => {\r\n    if (image !== imageUrl) {\r\n      await deleteStorage(imageUrl);\r\n      const newImageUrl = await setStorage(uid, image);\r\n      return newImageUrl;\r\n    } else {\r\n      return imageUrl;\r\n    }\r\n  };\r\n  return { setStorage, updateStorage, deleteStorage };\r\n};\r\n"],"names":["getRandomValues","_ref","_ref$setAction","setAction","addPost","setStorage","_useState","useState","_useState2","_slicedToArray","image","setImage","user","useSelector","state","submitAction","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","inputValue","imageUrl","wrap","_context","prev","next","uid","sent","stop","_x","apply","arguments","_useInput","useInput","_useInput2","onChange","onSubmit","_jsxs","action","className","children","_jsx","type","placeholder","maxLength","value","disabled","PostPhotoForm","randomUUID","crypto","bind","rnds8","Uint8Array","rng","Error","byteToHex","i","push","toString","slice","unsafeStringify","arr","offset","length","undefined","toLowerCase","options","buf","native","rnds","random","useParams","postFormToggle","postToggle","_useDataBase","addDoc","POST_COLLECTION","date","Date","now","post","_x2","_x3","updatePost","_callee2","pid","_context2","updateDoc","POST_DOC","_x4","_x5","_x6","deletePost","_ref3","_callee3","_context3","deleteDoc","_x7","useDataBase","_useStorage","fileRef","uploadResult","ref","storage","concat","uuid","uploadString","getDownloadURL","abrupt","deleteStorage","curImgRef","deleteObject","t0","console","log","updateStorage","newImageUrl","useStorage","index","setIndex","useMemo","useEffect","_Fragment","PostForm","PostList","UserPostList"],"sourceRoot":""}